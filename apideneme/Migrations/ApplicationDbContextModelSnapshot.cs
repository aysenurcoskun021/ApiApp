// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using apideneme.Controllers.Data;

#nullable disable

namespace apideneme.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("apideneme.models2.Info", b =>
                {
                    b.Property<int>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InfoId"));

                    b.Property<int>("page")
                        .HasColumnType("integer");

                    b.Property<int>("results")
                        .HasColumnType("integer");

                    b.Property<string>("seed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InfoId");

                    b.ToTable("Info");
                });

            modelBuilder.Entity("apideneme.models2.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("postcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("location");
                });

            modelBuilder.Entity("apideneme.models2.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("md5")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sha1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sha256")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginId");

                    b.ToTable("login");
                });

            modelBuilder.Entity("apideneme.models2.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("uuid");

                    b.Property<string>("cell")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LoginId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("apideneme.models2.Location", b =>
                {
                    b.OwnsOne("apideneme.models2.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("latitude")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("longitude")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("LocationId");

                            b1.ToTable("location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("apideneme.models2.Street", "Street", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("number")
                                .HasColumnType("integer");

                            b1.HasKey("LocationId");

                            b1.ToTable("location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("apideneme.models2.Timezone", "Timezone", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("offset")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("LocationId");

                            b1.ToTable("location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("Street")
                        .IsRequired();

                    b.Navigation("Timezone")
                        .IsRequired();
                });

            modelBuilder.Entity("apideneme.models2.User", b =>
                {
                    b.HasOne("apideneme.models2.Location", "location")
                        .WithMany("User")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apideneme.models2.Login", "login")
                        .WithMany("User")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("apideneme.models2.Dob", "Dob", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("age")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("date")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("apideneme.models2.Id", "Id", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("value")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("apideneme.models2.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("first")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("last")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("apideneme.models2.Picture", "Picture", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("large")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("medium")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("thumbnail")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("apideneme.models2.Registered", "Registered", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("age")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("date")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Dob")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Picture")
                        .IsRequired();

                    b.Navigation("Registered")
                        .IsRequired();

                    b.Navigation("location");

                    b.Navigation("login");
                });

            modelBuilder.Entity("apideneme.models2.Location", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("apideneme.models2.Login", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
